import org.flywaydb.core.Flyway
import org.jooq.codegen.GenerationTool
import org.jooq.codegen.DefaultGeneratorStrategy
import org.jooq.meta.Definition
import org.jooq.impl.Mode
import org.jooq.meta.jaxb.Database
import org.jooq.meta.jaxb.Generate
import org.jooq.meta.jaxb.Generator
import org.jooq.meta.jaxb.Jdbc
import org.jooq.meta.jaxb.ForcedType
import org.jooq.meta.jaxb.Target
import org.jooq.meta.jaxb.Strategy
import org.jooq.meta.postgres.PostgresDatabase
import org.postgresql.Driver
import org.testcontainers.containers.PostgreSQLContainer

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
//        classpath errorprone
        classpath springDepManager
        classpath springBoot
        classpath testContainersPg
        classpath flyway
        classpath postgres
        classpath jooq
        classpath jooqMeta
        classpath jooqCodegen
    }
}


group = "awsm"
version = "UNSPECIFIED"

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'java-library'
apply plugin: 'groovy'
apply plugin: 'checkstyle'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
//apply plugin: 'net.ltgt.errorprone'

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
    maven() {
        url cronapp
    }
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }

}

dependencyManagement {
    imports {
        mavenBom springBootBom
    }
}


dependencies {
//    wait for Java 15 support :(
//    errorprone errorproneCore
//    errorprone nullaway

    // experimental
    api 'org.immutables:value-annotations:2.8.8'
    annotationProcessor group: 'org.immutables', name: 'value-processor', version: '2.8.8'
    testImplementation group: 'com.h2database', name: 'h2', version: '1.4.200'

    implementation emojiJava
    implementation commonsText
    implementation jool
    implementation vavr
    implementation commonsLang
    implementation gson
    implementation gsonExtras
    implementation hibernate
    implementation noException
    implementation guava
    implementation mug
    implementation caffeine
    implementation streamEx
    implementation faker
    implementation jasypt
    implementation threeten
    implementation simpleJavaMail
    implementation springBootJetty
    implementation springBootJpa
    implementation springTx
    implementation springContext
    implementation springWebMvc
    implementation(springBootWeb) {
        exclude module: "spring-boot-starter-tomcat"
        because 'we use Jetty instead of Tomcat'
    }
    implementation javaxJson
    implementation jooq
    implementation bucket4j
    implementation failsafe
    implementation postgres
    implementation flyway
    implementation pipelinr
    implementation hashIds
    implementation ulidGenerator
    testImplementation wiremock
    testImplementation guavaTestlib
    testImplementation concurrentUnit
    testImplementation groovy
    testImplementation groovyJson
    testImplementation jsonAssert
    testImplementation archUnit
    testImplementation spockSpring
    testImplementation springBootTest
    testImplementation springBootTestCfg
    testImplementation testContainersPg
    testImplementation testContainersSpo
}

java {
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15
}

jacoco {
    toolVersion = '0.8.7-SNAPSHOT'
}

checkstyle {
    toolVersion = "8.23"
}

tasks.withType(Test) {
    maxParallelForks = 4
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.compilerArgs += "-Xlint:unchecked"
    options.compilerArgs += "-Xlint:preview"
//    it.options.errorprone { e ->
//        e.disableWarningsInGeneratedCode = true
//        e.disable "TypeParameterUnusedInFormals"
//        e.option "NullAway:AnnotatedPackages", "awsm"
//        e.option "NullAway:ExcludedFieldAnnotations", "org.springframework.beans.factory.annotation.Autowired"
//        e.option "NullAway:ExternalInitAnnotations", "javax.persistence.Entity,javax.persistence.Embeddable"
//    }
}

tasks.withType(Checkstyle) {
    exclude 'jooq'
}

compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}

def jooqOutput = "$buildDir/generated-src/jooq"
sourceSets {
    main {
        java {
            srcDirs += jooqOutput
        }
    }
}

class JooqGeneratorStrategy extends DefaultGeneratorStrategy {
    @Override
    String getJavaGetterName(Definition definition, Mode mode) {
        super.getterSetterSuffix(definition).uncapitalize()
    }
}

task generateJooq {
    description = "Generates jOOQ sources."
    doLast {
        new PostgreSQLContainer("postgres:11.5").withCloseable { pg ->
            pg.start()

            def flyway = Flyway.configure()
                    .locations("filesystem:$projectDir/src/main/resources/db/migration")
                    .dataSource(pg.jdbcUrl, pg.username, pg.password)
                    .load()

            flyway.migrate()

            def configuration = new org.jooq.meta.jaxb.Configuration()
                    .withLogging(org.jooq.meta.jaxb.Logging.TRACE)
                    .withJdbc(new Jdbc()
                            .withDriver(Driver.name)
                            .withUrl(pg.jdbcUrl)
                            .withUser(pg.username)
                            .withPassword(pg.password))
                    .withGenerator(new Generator()
                            .withStrategy(new Strategy()
                                    .withName("JooqGeneratorStrategy")
                            )
                            .withGenerate(new Generate()
                                    .withJavaTimeTypes(true)
                                    .withFluentSetters(true)
                            )
                            .withDatabase(new Database()
                                    .withName(PostgresDatabase.name)
                                    .withIncludes(".*")
                                    .withExcludes("")
                                    .withInputSchema("public")
                                    .withRecordVersionFields("VERSION")
                            )
                            .withTarget(new Target()
                                    .withClean(true)
                                    .withDirectory(jooqOutput)
                                    .withPackageName("jooq")
                            )
                    )

            GenerationTool.generate(configuration)
        }

    }
}